import SwiftUI

struct CreateTransactionView: View {
    let direction: Direction
    @EnvironmentObject var viewModel: CreateTransactionViewModel
    
    @Environment(\.dismiss) private var dismiss
    @State private var showAlert: Bool = false
    
    var body: some View {
        NavigationStack {
            Form {
                Section {
                    Picker("–°—Ç–∞—Ç—å—è", selection: $viewModel.category) {
                        ForEach(viewModel.categories) { category in
                            Text(category.name)
                                .tag(category)
                        }
                    }
                    HStack {
                        Text("–°—É–º–º–∞")
                        TextField("", text: $viewModel.amount)
                            .keyboardType(.decimalPad)
                            .multilineTextAlignment(.trailing)
                    }
                    HStack {
                        Text("–î–∞—Ç–∞")
                        Spacer()
                        CustomDatePickerView(date: $viewModel.date)
                            .onChange(of: viewModel.date) { oldDate, newDate in
                                viewModel.date = min(newDate, Date())
                            }
                    }
                    HStack {
                        Text("–í—Ä–µ–º—è")
                        Spacer()
                        CustomTimePickerView(time: $viewModel.time)
                    }
                    HStack {
                        TextField("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", text: $viewModel.comment)
                    }
                }
                
                if viewModel.isEditing() {
                    Button {
                        dismiss()
                        Task {
                            if let transaction = viewModel.existingTransaction {
                                try await viewModel.deleteTransaction(transaction)
                            }
                        }
                    } label: {
                        Text("–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
                            .foregroundStyle(Color.red)
                    }
                }

            }
            .navigationTitle(direction == .outcome ? "–ú–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã" : "–ú–æ–∏ –¥–æ—Ö–æ–¥—ã")
            .toolbar {
                ToolbarItem(placement: .cancellationAction) {
                    Button("–û—Ç–º–µ–Ω–∏—Ç—å") {
                        dismiss()
                    }
                }
                ToolbarItem(placement: .confirmationAction) {
                    Button((viewModel.existingTransaction != nil) ? "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" : "–°–æ–∑–¥–∞—Ç—å") {
                        Task {
                            do {
                                let validated = try await viewModel.saveTransaction()
                                if validated {
                                    dismiss()
                                } else {
                                    showAlert = true
                                }
                            } catch {
                                print("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:", viewModel.error)
                                showAlert = true
                            }
                        }
                    }
                }
            }
            .onAppear {
                Task {
                    await viewModel.loadCategories(of: direction)
                }
            }
        }
        .alert("–û—à–∏–±–∫–∞", isPresented: $showAlert) {
            Button("OK", role: .cancel) { }
        } message: {
            Text("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
        }
    }
}

#Preview {
    let deps = AppDependencies(token: "—Ç–≤–æ–π_—Ç–æ–∫–µ–Ω")
    
    let account = AccountBrief(id: 1, name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç", balance: 1000, currency: "RUB")
    let category = Category(id: 1, name: "–ï–¥–∞", emoji: "üçé", isIncome: false)

    let transaction = Transaction(
        id: 1,
        account: account,
        category: category,
        amount: 100,
        transactionDate: Date(),
        comment: "–ü—Ä–∏–º–µ—Ä",
        createdAt: Date(),
        updatedAt: Date()
    )

    let viewModel = CreateTransactionViewModel(
        accountId: 1,
        accountService: deps.bankService,
        transactionService: deps.transactionService,
        categoriesService: deps.categoriesService,
        existing: transaction
    )
    
    CreateTransactionView(direction: .outcome)
        .environmentObject(viewModel)
}

#Preview {
    TransactionsListView(direction: .outcome)
}
